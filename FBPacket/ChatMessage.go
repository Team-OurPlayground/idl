// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package FBPacket

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ChatMessageT struct {
	Message string `json:"message"`
	Sender string `json:"sender"`
	Receiver string `json:"receiver"`
	Type ChatType `json:"type"`
}

func (t *ChatMessageT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	messageOffset := flatbuffers.UOffsetT(0)
	if t.Message != "" {
		messageOffset = builder.CreateString(t.Message)
	}
	senderOffset := flatbuffers.UOffsetT(0)
	if t.Sender != "" {
		senderOffset = builder.CreateString(t.Sender)
	}
	receiverOffset := flatbuffers.UOffsetT(0)
	if t.Receiver != "" {
		receiverOffset = builder.CreateString(t.Receiver)
	}
	ChatMessageStart(builder)
	ChatMessageAddMessage(builder, messageOffset)
	ChatMessageAddSender(builder, senderOffset)
	ChatMessageAddReceiver(builder, receiverOffset)
	ChatMessageAddType(builder, t.Type)
	return ChatMessageEnd(builder)
}

func (rcv *ChatMessage) UnPackTo(t *ChatMessageT) {
	t.Message = string(rcv.Message())
	t.Sender = string(rcv.Sender())
	t.Receiver = string(rcv.Receiver())
	t.Type = rcv.Type()
}

func (rcv *ChatMessage) UnPack() *ChatMessageT {
	if rcv == nil { return nil }
	t := &ChatMessageT{}
	rcv.UnPackTo(t)
	return t
}

type ChatMessage struct {
	_tab flatbuffers.Table
}

func GetRootAsChatMessage(buf []byte, offset flatbuffers.UOffsetT) *ChatMessage {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ChatMessage{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsChatMessage(buf []byte, offset flatbuffers.UOffsetT) *ChatMessage {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ChatMessage{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ChatMessage) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ChatMessage) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ChatMessage) Message() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ChatMessage) Sender() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ChatMessage) Receiver() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ChatMessage) Type() ChatType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return ChatType(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ChatMessage) MutateType(n ChatType) bool {
	return rcv._tab.MutateInt8Slot(10, int8(n))
}

func ChatMessageStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func ChatMessageAddMessage(builder *flatbuffers.Builder, message flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(message), 0)
}
func ChatMessageAddSender(builder *flatbuffers.Builder, sender flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(sender), 0)
}
func ChatMessageAddReceiver(builder *flatbuffers.Builder, receiver flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(receiver), 0)
}
func ChatMessageAddType(builder *flatbuffers.Builder, type_ ChatType) {
	builder.PrependInt8Slot(3, int8(type_), 0)
}
func ChatMessageEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
